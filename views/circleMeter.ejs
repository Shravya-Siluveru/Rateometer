<!DOCTYPE html>
<meta charset="utf-8">
<svg width="960" height="500"></svg>
<script src="https://d3js.org/d3.v4.js"></script>
<script>

        function buildTimeMeter(startTime, endTime){
            
            var tau = 2 * Math.PI;
            var arc = d3.arc()
                .innerRadius(60)
                .outerRadius(70)
                .startAngle(0);

            var timeDiff = getTimeDifference(startTime, endTime);
            
            var svg = d3.select("svg"),
                width = +svg.attr("width"),
                height = +svg.attr("height"),
                g = svg.append("g").attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

            var innerFill = g.append("circle")
                            .style("fill", "#666666")
                            .attr("r", 60);

            g.append("text")
                    .attr('dx',-30)
                    .attr('dy',-20)
                    .attr("font-size","16px")
                    .attr("fill","#bac4ba")
                    .text("Time Left");
            
            var durationTitle =  g.append("text")
                                    .attr('dx',-25)
                                    .attr('dy',0)
                                    .attr("font-size","14px")
                                    .attr("fill","#bac4ba")
                                    .text("Hrs : Min");

            var timeLeftText =  g.append("text")
                                    .attr('dx',-35)
                                    .attr('dy',32)
                                    .attr("font-size","32px")
                                    .attr("fill","white")
                                    .text("00:00");

            var background = g.append("path")
                            .datum({endAngle: tau, startAngle: 0})
                            .style("fill", "#4d4d4d")
                            .attr("d", arc);

            var foreground = g.append("path")
                .datum({ startAngle: 0, endAngle: 0 })
                .style("fill", "#66cc66")
                .attr("d", arc)
                .attr("transform","rotate(180)");

            var updateTime = function(){
                                var timeLeft =  getTimeLeft(endTime);
                                if(timeLeft > 0){
                                    var asTime = convertMS(timeLeft);
                                    if(asTime.h < 1){
                                        durationTitle.text("Min:Sec");
                                        timeLeftText.text(asTime.m + ":" + asTime.s);
                                    }
                                    else{
                                        timeLeftText.text(asTime.h + ":" + asTime.m);
                                    }
                                    foreground.transition()
                                               .attrTween("d", arcTween((timeLeft / timeDiff) * tau, arc));
                                }
                        };
            updateTime();
            setInterval(function(){
                updateTime();
            }, 1000);
        }

        function arcTween(newAngle, arc) {   
            return function(d) {
                var interpolate = d3.interpolate(d.endAngle, newAngle);
                return function(t) {
                    d.endAngle = interpolate(t);
                    return arc(d);
                };
            };
        }

        function getTimeLeft(endTime){
            var endDT = new Date();
            endTime = endTime.split(":");
            endDT.setHours(endTime[0]);
            endDT.setMinutes(endTime[1]);
            endDT.setSeconds(0);
            return endDT - new Date();
        }

        function getTimeDifference(startTime, endTime){
            var startDT = new Date();
            startTime = startTime.split(":");
            startDT.setHours(startTime[0]);
            startDT.setMinutes(startTime[1]);
            
            var endDT = new Date();
            endTime = endTime.split(":");
            endDT.setHours(endTime[0]);
            endDT.setMinutes(endTime[1]);
            return endDT - startDT;
        }

        function convertMS(duration) { 
            var milliseconds = parseInt((duration%1000)/100)
                , seconds = parseInt((duration/1000)%60)
                , minutes = parseInt((duration/(1000*60))%60)
                , hours = parseInt((duration/(1000*60*60))%24);

            hours = (hours < 10) ? "0" + hours : ""+hours;
            minutes = (minutes < 10) ? "0" + minutes : ""+minutes;
            seconds = (seconds < 10) ? "0" + seconds : ""+seconds;
            return { h: hours, m: minutes, s: seconds };
        }

        buildTimeMeter("8:30", "9:30");

</script>