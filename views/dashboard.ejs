<html>

<head>
    <script src="https://d3js.org/d3.v4.js"></script>
    <style>
        .column {
            float: left;
            width: 50%;
        }

        .row:after {
            content: "";
            display: table;
            clear: both;
        }

        .chart-container {
            width: 100%;
            height: 60%;
            border: 1px dotted silver;
        }
    </style>
</head>

<body>
    <div class="row">
        <div class="column">
            <h1>Bar chart</h1>
            <svg id="bar-chart"></svg>
        </div>
        <div class="column">
            <h1>Progress chart</h1>
            <div class="chart-container"> </div>
        </div>
    </div>
    <script> // Bar Chart

        var barMargin = { top: 20, right: 20, bottom: 30, left: 40 },
            barWidth = 460 - barMargin.left - barMargin.right,
            barHeight = 500 - barMargin.top - barMargin.bottom;

        var colors = { "Swap Price": "#77ace5", "Dealer Retail Price": "#58616b" };

        var x = d3.scaleBand()
            .range([0, barWidth])
            .padding(0.1);
        var y = d3.scaleLinear()
            .range([barHeight, 0]);

        var barSvg = d3.select("svg#bar-chart")
            .attr("width", barWidth + barMargin.left + barMargin.right)
            .attr("height", barHeight + barMargin.top + barMargin.bottom)
            .append("g")
            .attr("transform",
                "translate( " + barMargin.left + ", " + barMargin.top + ") ");

        d3.csv("data", function (error, data) {
            if (error) throw error;
            data.forEach(function (d) {
                d.sales = +d.sales;
            });

            x.domain(data.map(function (d) { return d.type; }));
            y.domain([0, d3.max(data, function (d) { return d.price; })]);

            var barGrp = barSvg.append("g");

            barGrp.selectAll(".bar")
                .data(data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", function (d) { return x(d.type) + 50; })
                .attr("width", x.bandwidth() - 100)
                .attr("fill", function (d, i) { return colors[d.type]; })
                .attr("y", function (d) {
                    return y(0);
                })
                .attr("height", 0)
                .transition()
                .duration(1000)
                .attr("y", function (d) { return y(d.price); })
                .attr("height", function (d) { return barHeight - y(d.price); });

            barGrp.selectAll("text.type-label")
                .data(data)
                .enter()
                .append("text")
                .data(data)
                .text(function (d) {
                    return d.type;
                })
                .attr("class", "type-label")
                .attr("x", -160)
                .attr("y", 85)
                .attr("dx", "-200")
                .attr("dy", function (d) {
                    if (d.type == "Swap Price")
                        return "30";
                    else if (d.type == "Dealer Retail Price")
                        return "220";
                })
                .attr("transform", "rotate(-90)")
                .style("font-size", "20px")
                .style("fill", "white");

            barGrp.selectAll("text.price-label")
                .data(data)
                .enter()
                .append("text")
                .data(data)
                .text(function (d) {
                    return "$" + d.price;
                })
                .attr("class", "price-label")
                .attr("x", function (d) {
                    if (d.type == "Swap Price")
                        return 80;
                    else if (d.type == "Dealer Retail Price")
                        return 270;
                })
                .attr("y", function (d) {
                    if (d.type == "Swap Price")
                        return 75;
                    else if (d.type == "Dealer Retail Price")
                        return -5;
                })
                .style("font-size", "20px")
                .style("fill", "black");

            var xAxis = barSvg.append("g")
                .attr("transform", "translate(0, " + barHeight + ") ")
                .call(d3.axisBottom(x).tickSize(0).tickFormat(""));

            xAxis.append("text")
                .attr("x", 180)
                .attr("y", 25)
                .text("YOU SAVE:")
                .style("font-size", "20px")
                .style("fill", "black");
            xAxis.append("text")
                .attr("x", 270)
                .attr("y", 25)
                .text("$1,601")
                .style("font-size", "20px")
                .style("fill", "#77ace5");
            // add the y Axis
            // svg.append("g ")
            //    .call(d3.axisLeft(y));

        });
    </script>
    <script>

        var minValue = 0, maxValue = 40000, steps = 10;
        var tau = 2 * Math.PI,
            value = 0.45,
            width = 100,
            height = 100,
            outerRadius = 30,
            innerRadius = (outerRadius / 5) * 3, fontSize = innerRadius / 6;

        var arc = d3.arc()
            .innerRadius(innerRadius)
            .outerRadius(outerRadius)
            //   .cornerRadius(outerRadius - innerRadius)
            .startAngle(0);

        var svg = d3.select('.chart-container').append("svg")
            .attr("width", '100%')
            .attr("height", '100%')
            .attr('viewBox', '0 0 ' + Math.min(width, height) + ' ' + Math.min(width, height))
            .attr('preserveAspectRatio', 'xMinYMin')
            .append("g")
            .attr("transform", "translate(" + Math.min(width, height) + "," + Math.min(width, height) / 2 + ")");

        svg.append("circle")
            .attr("r", outerRadius + 20)
            .attr("fill", "#e0afaf");

        svg.append("circle")
            .attr("r", innerRadius)
            .attr("fill", "black")
            .attr("stroke-width", 3)
            .attr("stroke", "#f98181");

        // Define the gradient
        var gradient = svg.append("defs")
            .append("linearGradient")
            .attr("id", "gradient")
            .attr("x1", "0%")
            .attr("y1", "0%")
            .attr("x2", "100%")
            .attr("y2", "100%");

        // Define the gradient colors
        gradient.append("stop")
            .attr("offset", "0%")
            .attr("stop-color", "#4d0000")
            .attr("stop-opacity", 1);

        gradient.append("stop")
            .attr("offset", "100%")
            .attr("stop-color", "#ff0000")
            .attr("stop-opacity", 1);

        var titleText1 = svg.append("text")
            .text('CURRENT')
            .attr("text-anchor", "middle")
            .attr("fill", "#ff8080")
            .style("font-size", fontSize + 'px')
            .attr("dy", -innerRadius / 3)
            .attr("dx", 1);

        svg.append("text").attr("fill", "#ff8080")
            .style("font-size", fontSize + 'px')
            .attr("dy", -innerRadius / 7).attr("dx", -2)
            .text("BID");

        var valueText = svg.append("text")
            .attr("text-anchor", "middle")
            .attr("fill", "white")
            .style("font-size", (fontSize + 5) + 'px')
            .attr("dy", innerRadius / 3)
            .attr("dx", 0).text("$0");

        var arcGroup = svg.append("g");

        var background = arcGroup.append("path")
            .datum({
                endAngle: tau
            })
            .attr("class", "arc")
            .style("fill", "black")
            .attr("d", arc);


        var foreground = arcGroup.append("path")
            .datum({
                endAngle: 0 * tau
            })
            .attr("class", "arc")
            .style("fill", "url(#gradient)")
            .attr("d", arc);

        foreground.transition()
            .duration(2000)
            .call(arcTween, value * tau);

        var outerLabels = arcGroup.append("g");

        var i;
        for (i = 0; i < 0.9; i = i + 0.1) {
            outerLabels.append("text")
                .attr("transform", function () {
                    var nA = -90 + (i * 360);
                    return 'rotate(' + nA + ')';
                })
                .attr("dy", i)
                .attr("dx", 40)
                .style("text-anchor", "middle")
                .style("font-size", '5px')
                .style("fill", "black")
                .text(function () {
                    //  if (i == 0)
                    //       return "";
                    //     else
                    return Math.ceil(i * maxValue);
                });
        }

        function arcTween(transition, newAngle) {

            transition.attrTween("d", function (d) {
                var interpolate = d3.interpolate(d.endAngle, newAngle);
                return function (t) {
                    d.endAngle = interpolate(t);
                    valueText.text("$" + Math.round((d.endAngle / tau) * maxValue));
                    return arc(d);
                };
            });
        }

    </script>
</body>

</html>